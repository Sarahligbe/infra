---
apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ .Values.statefulset.avalanche.name }}-scripts
  namespace: {{ .Values.statefulset.avalanche.name }}
data: 
  init.sh: |
    #!/bin/bash

    set -e

    apt update && apt install -y curl jq

    start() {
      /avalanchego/build/avalanchego \
        --data-dir /data \
        --http-host 0.0.0.0 \
        --http-allowed-hosts "*" \
        --staking-ephemeral-cert-enabled=true \
        --chain-config-dir=/configs/chains &
      PID="$!"
    }

    stop() {
      echo "Catching signal and sending to PID: $PID" && kill $PID
      while $(kill -0 $PID 2>/dev/null); do sleep 1; done
    }

    trap 'stop' TERM INT
    start
    wait $PID
  config.json: |
    {
      "eth-apis": [
        "eth",
        "eth-filter",
        "net",
        "debug-tracer",
        "web3",
        "internal-eth",
        "internal-blockchain",
        "internal-transaction",
        "internal-tx-pool",
        "internal-debug"
      ],
      "pruning-enabled": true,
      "allow-unfinalized-queries": true
    }
  liveness.sh: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/data/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/data/.block_number

    ETH_BLOCK_NUMBER=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9650/ext/bc/C/rpc) || exit 1

    CURRENT_BLOCK_NUMBER_HEX=$(echo $ETH_BLOCK_NUMBER | jq -r '.result')
    CURRENT_BLOCK_NUMBER=$(($CURRENT_BLOCK_NUMBER_HEX))

    if [[ ! -f "$FILE" ]]; then
      echo $CURRENT_BLOCK_NUMBER > $FILE
      exit 1
    fi

    PREVIOUS_BLOCK_NUMBER=$(cat $FILE)
    echo $CURRENT_BLOCK_NUMBER > $FILE

    if (( $CURRENT_BLOCK_NUMBER > $PREVIOUS_BLOCK_NUMBER )); then
      echo "daemon is running"
      exit 0
    fi

    echo "daemon is stalled"
    exit 1
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /evm.sh

    BLOCK_HEIGHT_TOLERANCE=5

    ETH_SYNCING=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H 'Content-Type:application/json;' http://localhost:9650/ext/bc/C/rpc) || exit 1
    INFO_PEERS=$(curl -sf -d '{"jsonrpc":"2.0","method":"info.peers","params":[],"id":1}' -H 'Content-Type:application/json;' http://localhost:9650/ext/info) || exit 1

    SYNCING=$(echo $ETH_SYNCING | jq -r '.result')
    NUM_PEERS=$(echo $INFO_PEERS | jq -r '.result.numPeers')

    if [[ $SYNCING == false ]]; then
      if (( $NUM_PEERS > 0 )); then
        eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9650/ext/bc/C/rpc) || exit 1
        current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
        current_block_number=$(($current_block_number_hex))

        best_reference_block_number=$(get_best_reference_block_number https://api.avax.network/ext/bc/C/rpc https://avalanche-c-chain.publicnode.com https://avalanche.public-rpc.com)

        # if node is reporting synced, double check against reference nodes
        reference_validation daemon $current_block_number $best_reference_block_number $BLOCK_HEIGHT_TOLERANCE

        echo "daemon is synced, with $NUM_PEERS peers"
        exit 0
      fi

      echo "daemon is synced, but has no peers"
      exit 1
    fi

    echo "daemon is still syncing"
    exit 1
  startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/data/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    NET_LISTENING=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9650/ext/bc/C/rpc) || exit 1
    INFO_PEERS=$(curl -sf -d '{"jsonrpc":"2.0","method":"info.peers","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9650/ext/info) || exit 1

    LISTENING=$(echo $NET_LISTENING | jq -r '.result')
    NUM_PEERS=$(echo $INFO_PEERS | jq -r '.result.numPeers')

    if [[ $LISTENING == true ]]; then
      if (( $NUM_PEERS > 0 )); then
        echo "daemon is listening, with $NUM_PEERS peers"
        exit 0
      fi

      echo "daemon is listening, but has no peers"
      exit 1
    fi

    echo "daemon is not listening"
    exit 1
  indexer-config.json: |
    {
      "fiat_rates": "coingecko",
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"avalanche-2\",\"platformIdentifier\": \"avalanche\",\"platformVsCurrency\": \"usd\",\"periodSeconds\": 900}",
      "mempoolTxTimeoutHours": 24,
      "queryBackendOnMempoolResync": false,
      "coin_name": "Avalanche",
      "coin_shortcut": "AVAX",
      "coin_label": "Avalanche",
      "rpc_url": "ws://localhost:9650/ext/bc/C/ws",
      "rpc_user": "",
      "rpc_pass": "",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "",
      "subversion": "",
      "address_format": "",
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }

---
apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ .Values.statefulset.bitcoin.name }}-scripts
  namespace: {{ .Values.statefulset.bitcoin.name }}
data: 
  init.sh: |
    #!/bin/bash

    set -e

    start_coin() {
      bitcoind \
        -rpcuser=user \
        -rpcpassword=password \
        -rpcallowip=0.0.0.0/0 \
        -rpcbind=0.0.0.0 \
        -datadir=/data \
        -printtoconsole=1 \
        -server=1 \
        -nolisten=1 \
        -txindex=1 \
        -disablewallet=1 \
        -zmqpubhashtx=tcp://127.0.0.1:28332 \
        -zmqpubhashblock=tcp://127.0.0.1:28332 \
        -rpcworkqueue=1100 \
        -maxmempool=2000 \
        -dbcache=4000 &
      PID="$!"
    }

    stop_coin() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    trap 'stop_coin' TERM INT

    start_coin
    wait $PID
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    TOLERANCE=1

    CONNECTION_COUNT=$(curl -sf -H 'content-type: application/json' -u user:password -d '{ "jsonrpc": "2.0", "id": "probe", "method": "getconnectioncount", "params": [] }' http://localhost:8332) || exit 1
    BLOCKCHAIN_INFO=$(curl -sf -H 'content-type: application/json' -u user:password -d '{ "jsonrpc": "2.0", "id": "probe", "method": "getblockchaininfo", "params": [] }' http://localhost:8332) || exit 1

    PEERS=$(echo $CONNECTION_COUNT | jq -r '.result')
    NODE_LATEST_BLOCK_HEIGHT=$(echo $BLOCKCHAIN_INFO | jq -r '.result.blocks')
    NETWORK_LATEST_BLOCK_HEIGHT=$(echo $BLOCKCHAIN_INFO | jq -r '.result.headers')

    NOMINAL_BLOCKS=$(( $NETWORK_LATEST_BLOCK_HEIGHT - $TOLERANCE ))

    if (( $NODE_LATEST_BLOCK_HEIGHT >= $NOMINAL_BLOCKS )); then
      if (( $PEERS > 0 )); then
        echo "node is synced with $PEERS peers"
        exit 0
      fi

      echo "node is synced, but has no peers"
      exit 1
    fi

    echo "node is still syncing"
    exit 1
  indexer-config.json: |
    {
      "alternative_estimate_fee": "whatthefee-disabled",
      "alternative_estimate_fee_params": "{\"url\": \"https://whatthefee.io/data.json\", \"periodSeconds\": 60}",
      "fiat_rates": "coingecko",
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"bitcoin\", \"periodSeconds\": 900}",
      "coin_name": "Bitcoin",
      "coin_shortcut": "BTC",
      "coin_label": "Bitcoin",
      "rpc_url": "http://localhost:8332",
      "rpc_user": "user",
      "rpc_pass": "password",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "tcp://localhost:28332",
      "subversion": "",
      "address_format": "",
      "xpub_magic": 76067358,
      "xpub_magic_segwit_p2sh": 77429938,
      "xpub_magic_segwit_native": 78792518,
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }

---
apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ .Values.statefulset.bitcoincash.name }}-scripts
  namespace: {{ .Values.statefulset.bitcoincash.name }}
data: 
  init.sh: |
    #!/bin/bash

    set -e

    start_coin() {
      bitcoind \
        -rpcuser=user \
        -rpcpassword=password \
        -rpcallowip=0.0.0.0/0 \
        -rpcbind=0.0.0.0 \
        -rpcport=8332 \
        -datadir=/data \
        -printtoconsole=1 \
        -server=1 \
        -nolisten=1 \
        -txindex=1 \
        -disablewallet=1 \
        -zmqpubhashtx=tcp://127.0.0.1:28332 \
        -zmqpubhashblock=tcp://127.0.0.1:28332 \
        -rpcworkqueue=1100 \
        -maxmempool=2000 \
        -dbcache=4000 &
      PID="$!"
    }

    stop_coin() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    trap 'stop_coin' TERM INT

    start_coin
    wait $PID
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    TOLERANCE=1

    CONNECTION_COUNT=$(curl -sf -H 'content-type: application/json' -u user:password -d '{ "jsonrpc": "2.0", "id": "probe", "method": "getconnectioncount", "params": [] }' http://localhost:8332) || exit 1
    BLOCKCHAIN_INFO=$(curl -sf -H 'content-type: application/json' -u user:password -d '{ "jsonrpc": "2.0", "id": "probe", "method": "getblockchaininfo", "params": [] }' http://localhost:8332) || exit 1

    PEERS=$(echo $CONNECTION_COUNT | jq -r '.result')
    NODE_LATEST_BLOCK_HEIGHT=$(echo $BLOCKCHAIN_INFO | jq -r '.result.blocks')
    NETWORK_LATEST_BLOCK_HEIGHT=$(echo $BLOCKCHAIN_INFO | jq -r '.result.headers')

    NOMINAL_BLOCKS=$(( $NETWORK_LATEST_BLOCK_HEIGHT - $TOLERANCE ))

    if (( $NODE_LATEST_BLOCK_HEIGHT >= $NOMINAL_BLOCKS )); then
      if (( $PEERS > 0 )); then
        echo "node is synced with $PEERS peers"
        exit 0
      fi

      echo "node is synced, but has no peers"
      exit 1
    fi

    echo "node is still syncing"
    exit 1
  index-config.json: |
    {
      "fiat_rates": "coingecko",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"bitcoin-cash\", \"periodSeconds\": 900}",
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "coin_name": "Bcash",
      "coin_shortcut": "BCH",
      "coin_label": "Bitcoin Cash",
      "rpc_url": "http://localhost:8332",
      "rpc_user": "user",
      "rpc_pass": "password",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "tcp://localhost:28332",
      "subversion": "",
      "address_format": "cashaddr",
      "xpub_magic": 76067358,
      "slip44": 145,
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.bnbsmartchain.name }}-scripts
  namespace: {{ .Values.statefulset.bnbsmartchain.name }}
data:
  init.sh: |
    #!/bin/bash

    set -e

    [ "$DEBUG" == "true" ] && set -x

    DATA_DIR=/data
    CHAINDATA_DIR=$DATA_DIR/geth/chaindata

    if [[ -n $SNAPSHOT && ! -d "$CHAINDATA_DIR" ]]; then
      echo "restoring from snapshot: $SNAPSHOT"

      apk add zstd
      rm -rf $DATA_DIR/geth;

      # extract with lz4 (https://github.com/bnb-chain/bsc-snapshots)
      if echo "$SNAPSHOT" | grep -q "tar\.lz4$"; then
        wget -c $SNAPSHOT -O - | lz4 -cd | tar xf - -C $DATA_DIR
        mv /data/server/data-seed/geth $DATA_DIR/geth
      fi

      # extract with zstd (https://github.com/48Club/bsc-snapshots)
      if echo "$SNAPSHOT" | grep -q "tar\.zst$"; then
        baseName=$(basename "$SNAPSHOT" .tar.zst)
        dirName=$(echo "$baseName" | sed 's/\.[^.]*$//')
        wget -c $SNAPSHOT -O - | zstd -cd | tar xf - -C $DATA_DIR
        mv /data/$dirName/geth $DATA_DIR/geth
      fi
    fi


    if [ ! -d "$CHAINDATA_DIR" ]; then
      geth init --datadir $DATA_DIR genesis.json
    fi

    # add static peers
    PEERS=$(curl -s https://api.binance.org/v1/discovery/peers | jq -r '.peers | @csv')
    if [[ -n "$PEERS" && "$PEERS" != "null" ]]; then
      sed -i -e "s|StaticNodes = \[|StaticNodes = [$PEERS,|" config.toml
    fi

    # hard reset existing peers
    hard_reset_peers() {
      while true; do
        if [[ -e "/data/geth.ipc" ]]; then
          geth --exec '
            for (i=0; i<admin.peers.length; i++) {
              const enode = admin.peers[i].enode
              if (admin.removePeer(enode)) {
                console.log("sucessfully removed peer: ", enode)
              } else {
                console.log("failed to remove peer: ", enode)
              }
            }' attach /data/geth.ipc
          break
        else
          sleep 1
        fi
      done
    }

    start() {
      geth \
        --config config.toml \
        --datadir $DATA_DIR \
        --http \
        --http.addr 0.0.0.0 \
        --http.port 8545 \
        --http.api eth,net,web3,debug,txpool,parlia \
        --http.vhosts '*' \
        --http.corsdomain '*' \
        --ws \
        --ws.port 8546 \
        --ws.api eth,net,web3,debug,txpool,parlia \
        --ws.origins '*' \
        --syncmode full \
        --maxpeers 200 \
        --rpc.allow-unprotected-txs \
        --txlookuplimit 0 \
        --cache 8000 \
        --nat none &
      PID="$!"

      hard_reset_peers &
    }

    stop() {
      echo "Catching signal and sending to PID: $PID" && kill $PID
      while $(kill -0 $PID 2>/dev/null); do sleep 1; done
    }

    trap 'stop' TERM INT
    start
    wait $PID
  liveness.sh: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/data/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/data/.block_number

    ETH_BLOCK_NUMBER=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    CURRENT_BLOCK_NUMBER_HEX=$(echo $ETH_BLOCK_NUMBER | jq -r '.result')
    CURRENT_BLOCK_NUMBER=$(($CURRENT_BLOCK_NUMBER_HEX))

    if [[ ! -f "$FILE" ]]; then
      echo $CURRENT_BLOCK_NUMBER > $FILE
      exit 1
    fi

    PREVIOUS_BLOCK_NUMBER=$(cat $FILE)
    echo $CURRENT_BLOCK_NUMBER > $FILE

    if (( $CURRENT_BLOCK_NUMBER > $PREVIOUS_BLOCK_NUMBER )); then
      echo "daemon is running"
      exit 0
    fi

    echo "daemon is stalled"
    exit 1
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /evm.sh

    BLOCK_HEIGHT_TOLERANCE=15

    ETH_SYNCING=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
    NET_PEER_COUNT=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    SYNCING=$(echo $ETH_SYNCING | jq -r '.result')
    PEER_COUNT_HEX=$(echo $NET_PEER_COUNT | jq -r '.result')
    PEER_COUNT=$(($PEER_COUNT_HEX))

    if [[ $SYNCING == false ]]; then
      if (( $PEER_COUNT > 0 )); then
        eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
        current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
        current_block_number=$(($current_block_number_hex))

        # budget load balance across available public node replicas: https://docs.bscscan.com/misc-tools-and-utilities/public-rpc-nodes
        best_reference_block_number=$(get_best_reference_block_number https://bsc-dataseed$(((RANDOM%4)+1)).binance.org https://bsc-dataseed$(((RANDOM%4)+1)).defibit.io https://bsc-dataseed$(((RANDOM%4)+1)).ninicoin.io)

        # if node is reporting synced, double check against reference nodes
        reference_validation daemon $current_block_number $best_reference_block_number $BLOCK_HEIGHT_TOLERANCE

        echo "daemon is synced, with $PEER_COUNT peers"
        exit 0
      fi

      echo "daemon is synced, but has no peers"
      exit 1
    fi

    echo "daemon is still syncing"
    exit 1
  startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/data/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    NET_LISTENING=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
    NET_PEER_COUNT=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    LISTENING=$(echo $NET_LISTENING | jq -r '.result')
    PEER_COUNT_HEX=$(echo $NET_PEER_COUNT | jq -r '.result')
    PEER_COUNT=$(($PEER_COUNT_HEX))

    if [[ $LISTENING == true ]]; then
      if (( $PEER_COUNT > 0 )); then
        echo "daemon is listening, with $PEER_COUNT peers"
        exit 0
      fi

      echo "daemon is listening, but has no peers"
      exit 1
    fi

    echo "daemon is not listening"
    exit 1
  indexer-config.json: |
    {
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"binancecoin\",\"platformIdentifier\": \"binance-smart-chain\",\"platformVsCurrency\": \"bnb\",\"periodSeconds\": 900}",
      "mempoolTxTimeoutHours": 24,
      "queryBackendOnMempoolResync": false,
      "coin_name": "BNB Smart Chain",
      "coin_shortcut": "BNB",
      "coin_label": "BNB Smart Chain",
      "rpc_url": "ws://localhost:8546",
      "rpc_user": "",
      "rpc_pass": "",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "",
      "subversion": "",
      "address_format": "",
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.dogecoin.name }}-scripts
  namespace: {{ .Values.statefulset.dogecoin.name }}
data:
  init.sh: |
    #!/bin/bash

    set -e

    start_coin() {
      dogecoind \
        -port=22556 \
        -rpcuser=user \
        -rpcpassword=password \
        -rpcallowip=0.0.0.0/0 \
        -rpcbind=0.0.0.0 \
        -datadir=/data \
        -printtoconsole=1 \
        -server=1 \
        -nolisten=1 \
        -txindex=1 \
        -disablewallet=1 \
        -zmqpubhashtx=tcp://127.0.0.1:28332 \
        -zmqpubhashblock=tcp://127.0.0.1:28332 \
        -rpcworkqueue=1100 \
        -rpcport=8332 \
        -maxmempool=2000 \
        -dbcache=4000 &
      PID="$!"
    }

    stop_coin() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    trap 'stop_coin' TERM INT

    start_coin
    wait $PID
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    TOLERANCE=1

    CONNECTION_COUNT=$(curl -sf -H 'content-type: application/json' -u user:password -d '{ "jsonrpc": "2.0", "id": "probe", "method": "getconnectioncount", "params": [] }' http://localhost:8332) || exit 1
    BLOCKCHAIN_INFO=$(curl -sf -H 'content-type: application/json' -u user:password -d '{ "jsonrpc": "2.0", "id": "probe", "method": "getblockchaininfo", "params": [] }' http://localhost:8332) || exit 1

    PEERS=$(echo $CONNECTION_COUNT | jq -r '.result')
    NODE_LATEST_BLOCK_HEIGHT=$(echo $BLOCKCHAIN_INFO | jq -r '.result.blocks')
    NETWORK_LATEST_BLOCK_HEIGHT=$(echo $BLOCKCHAIN_INFO | jq -r '.result.headers')

    NOMINAL_BLOCKS=$(( $NETWORK_LATEST_BLOCK_HEIGHT - $TOLERANCE ))

    if (( $NODE_LATEST_BLOCK_HEIGHT >= $NOMINAL_BLOCKS )); then
      if (( $PEERS > 0 )); then
        echo "node is synced with $PEERS peers"
        exit 0
      fi

      echo "node is synced, but has no peers"
      exit 1
    fi

    echo "node is still syncing"
    exit 1
  indexer-config.json: |
    {
      "fiat_rates": "coingecko",
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"dogecoin\", \"periodSeconds\": 900}",
      "coin_name": "Dogecoin",
      "coin_shortcut": "DOGE",
      "coin_label": "Dogecoin",
      "rpc_url": "http://localhost:8332",
      "rpc_user": "user",
      "rpc_pass": "password",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "tcp://localhost:28332",
      "subversion": "",
      "address_format": "",
      "xpub_magic": 49990397,
      "slip44": 3,
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.ethereum.name }}-scripts
  namespace: {{ .Values.statefulset.ethereum.name }}
data:
  init.sh: |
    #!/bin/sh

    set -e

    apk add bash curl jq

    start_coin_bg() {
      geth \
        --$NETWORK \
        --authrpc.jwtsecret /jwt.hex \
        --syncmode full \
        --datadir /data \
        --http \
        --http.addr 0.0.0.0 \
        --http.port 8545 \
        --http.api eth,net,web3,debug,txpool,engine \
        --http.vhosts '*' \
        --http.corsdomain '*' \
        --ws \
        --ws.addr 0.0.0.0 \
        --ws.port 8546 \
        --ws.api eth,net,web3,debug,txpool,engine \
        --ws.origins '*' \
        --txlookuplimit 0 \
        --cache 4096 \
        --ipcdisable \
        --nat none &
      PID="$!"
    }

    stop_coin() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    start_coin_bg

    trap 'stop_coin' SIGTERM SIGINT
    wait $PID
  liveness.sh: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/data/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/data/.block_number

    ETH_BLOCK_NUMBER=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    CURRENT_BLOCK_NUMBER_HEX=$(echo $ETH_BLOCK_NUMBER | jq -r '.result')
    CURRENT_BLOCK_NUMBER=$(($CURRENT_BLOCK_NUMBER_HEX))

    if [[ ! -f "$FILE" ]]; then
      echo $CURRENT_BLOCK_NUMBER > $FILE
      exit 1
    fi

    PREVIOUS_BLOCK_NUMBER=$(cat $FILE)
    echo $CURRENT_BLOCK_NUMBER > $FILE

    if (( $CURRENT_BLOCK_NUMBER > $PREVIOUS_BLOCK_NUMBER )); then
      echo "daemon is running"
      exit 0
    fi

    echo "daemon is stalled"
    exit 1
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /evm.sh

    BLOCK_HEIGHT_TOLERANCE=5

    ETH_SYNCING=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    SYNCING=$(echo $ETH_SYNCING | jq -r '.result')

    if [[ $SYNCING == false ]]; then
      eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
      current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
      current_block_number=$(($current_block_number_hex))

      best_reference_block_number=$(get_best_reference_block_number https://ethereum.publicnode.com https://eth-mainnet.g.alchemy.com/v2/demo https://rpc.ankr.com/eth)

      # if node is reporting synced, double check against reference nodes
      reference_validation daemon $current_block_number $best_reference_block_number $BLOCK_HEIGHT_TOLERANCE

      echo "daemon is synced"
      exit 0
    fi

    echo "daemon is still syncing"
    exit 1
  startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/data/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    NET_LISTENING=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    LISTENING=$(echo $NET_LISTENING | jq -r '.result')

    if [[ $LISTENING == true ]]; then
      echo "daemon is listening"
      exit 0
    fi

    echo "daemon is not listening"
    exit 1
  jwt.hex: |
    f6f8f87f9104df70e9503e918b210160121a8607a6692fa785508f5eb17441b4
  daemon-beacon-readiness.sh: |
    #!/bin/bash

    SYNCING=$(curl -sf http://localhost:3500/eth/v1/node/syncing) || exit 1
    IS_SYNCING=$(echo "$SYNCING" | jq -r '.data.is_syncing')

    if [[ $IS_SYNCING == false ]]; then
      echo "daemon-beacon is synced"
      exit 0
    fi

    echo "daemon-beacon is still syncing"
    exit 1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.bnbsmartchain.name }}-scripts
  namespace: {{ .Values.statefulset.bnbsmartchain.name }}
data:
  init.sh: |


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.bnbsmartchain.name }}-scripts
  namespace: {{ .Values.statefulset.bnbsmartchain.name }}
data:
  init.sh: |


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.bnbsmartchain.name }}-scripts
  namespace: {{ .Values.statefulset.bnbsmartchain.name }}
data:
  init.sh: |


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.bnbsmartchain.name }}-scripts
  namespace: {{ .Values.statefulset.bnbsmartchain.name }}
data:
  init.sh: |