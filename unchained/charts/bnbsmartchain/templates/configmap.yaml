---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.statefulset.name }}-scripts
  namespace: {{ .Values.statefulset.name }}
data:
  daemon-init.sh: |
    #!/bin/bash

    set -e

    [ "$DEBUG" == "true" ] && set -x

    DATA_DIR=/data
    CHAINDATA_DIR=$DATA_DIR/geth/chaindata

    if [[ -n $SNAPSHOT && ! -d "$CHAINDATA_DIR" ]]; then
      echo "restoring from snapshot: $SNAPSHOT"

      apk add zstd
      rm -rf $DATA_DIR/geth;

      # extract with lz4 (https://github.com/bnb-chain/bsc-snapshots)
      if echo "$SNAPSHOT" | grep -q "tar\.lz4$"; then
        wget -c $SNAPSHOT -O - | lz4 -cd | tar xf - -C $DATA_DIR
        mv /data/server/data-seed/geth $DATA_DIR/geth
      fi

      # extract with zstd (https://github.com/48Club/bsc-snapshots)
      if echo "$SNAPSHOT" | grep -q "tar\.zst$"; then
        baseName=$(basename "$SNAPSHOT" .tar.zst)
        dirName=$(echo "$baseName" | sed 's/\.[^.]*$//')
        wget -c $SNAPSHOT -O - | zstd -cd | tar xf - -C $DATA_DIR
        mv /data/$dirName/geth $DATA_DIR/geth
      fi
    fi


    if [ ! -d "$CHAINDATA_DIR" ]; then
      geth init --datadir $DATA_DIR genesis.json
    fi

    # add static peers
    PEERS=$(curl -s https://api.binance.org/v1/discovery/peers | jq -r '.peers | @csv')
    if [[ -n "$PEERS" && "$PEERS" != "null" ]]; then
      sed -i -e "s|StaticNodes = \[|StaticNodes = [$PEERS,|" config.toml
    fi

    # hard reset existing peers
    hard_reset_peers() {
      while true; do
        if [[ -e "/data/geth.ipc" ]]; then
          geth --exec '
            for (i=0; i<admin.peers.length; i++) {
              const enode = admin.peers[i].enode
              if (admin.removePeer(enode)) {
                console.log("sucessfully removed peer: ", enode)
              } else {
                console.log("failed to remove peer: ", enode)
              }
            }' attach /data/geth.ipc
          break
        else
          sleep 1
        fi
      done
    }

    start() {
      geth \
        --config config.toml \
        --datadir $DATA_DIR \
        --http \
        --http.addr 0.0.0.0 \
        --http.port 8545 \
        --http.api eth,net,web3,debug,txpool,parlia \
        --http.vhosts '*' \
        --http.corsdomain '*' \
        --ws \
        --ws.port 8546 \
        --ws.api eth,net,web3,debug,txpool,parlia \
        --ws.origins '*' \
        --syncmode full \
        --maxpeers 200 \
        --rpc.allow-unprotected-txs \
        --txlookuplimit 0 \
        --cache 8000 \
        --nat none &
      PID="$!"

      hard_reset_peers &
    }

    stop() {
      echo "Catching signal and sending to PID: $PID" && kill $PID
      while $(kill -0 $PID 2>/dev/null); do sleep 1; done
    }

    trap 'stop' TERM INT
    start
    wait $PID
  daemon-liveness.sh: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/data/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/data/.block_number

    ETH_BLOCK_NUMBER=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    CURRENT_BLOCK_NUMBER_HEX=$(echo $ETH_BLOCK_NUMBER | jq -r '.result')
    CURRENT_BLOCK_NUMBER=$(($CURRENT_BLOCK_NUMBER_HEX))

    if [[ ! -f "$FILE" ]]; then
      echo $CURRENT_BLOCK_NUMBER > $FILE
      exit 1
    fi

    PREVIOUS_BLOCK_NUMBER=$(cat $FILE)
    echo $CURRENT_BLOCK_NUMBER > $FILE

    if (( $CURRENT_BLOCK_NUMBER > $PREVIOUS_BLOCK_NUMBER )); then
      echo "daemon is running"
      exit 0
    fi

    echo "daemon is stalled"
    exit 1
  daemon-readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /evm.sh

    BLOCK_HEIGHT_TOLERANCE=15

    ETH_SYNCING=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
    NET_PEER_COUNT=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    SYNCING=$(echo $ETH_SYNCING | jq -r '.result')
    PEER_COUNT_HEX=$(echo $NET_PEER_COUNT | jq -r '.result')
    PEER_COUNT=$(($PEER_COUNT_HEX))

    if [[ $SYNCING == false ]]; then
      if (( $PEER_COUNT > 0 )); then
        eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
        current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
        current_block_number=$(($current_block_number_hex))

        # budget load balance across available public node replicas: https://docs.bscscan.com/misc-tools-and-utilities/public-rpc-nodes
        best_reference_block_number=$(get_best_reference_block_number https://bsc-dataseed$(((RANDOM%4)+1)).binance.org https://bsc-dataseed$(((RANDOM%4)+1)).defibit.io https://bsc-dataseed$(((RANDOM%4)+1)).ninicoin.io)

        # if node is reporting synced, double check against reference nodes
        reference_validation daemon $current_block_number $best_reference_block_number $BLOCK_HEIGHT_TOLERANCE

        echo "daemon is synced, with $PEER_COUNT peers"
        exit 0
      fi

      echo "daemon is synced, but has no peers"
      exit 1
    fi

    echo "daemon is still syncing"
    exit 1
  daemon-startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/data/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    NET_LISTENING=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
    NET_PEER_COUNT=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    LISTENING=$(echo $NET_LISTENING | jq -r '.result')
    PEER_COUNT_HEX=$(echo $NET_PEER_COUNT | jq -r '.result')
    PEER_COUNT=$(($PEER_COUNT_HEX))

    if [[ $LISTENING == true ]]; then
      if (( $PEER_COUNT > 0 )); then
        echo "daemon is listening, with $PEER_COUNT peers"
        exit 0
      fi

      echo "daemon is listening, but has no peers"
      exit 1
    fi

    echo "daemon is not listening"
    exit 1
  indexer-config.json: |
    {
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"binancecoin\",\"platformIdentifier\": \"binance-smart-chain\",\"platformVsCurrency\": \"bnb\",\"periodSeconds\": 900}",
      "mempoolTxTimeoutHours": 24,
      "queryBackendOnMempoolResync": false,
      "coin_name": "BNB Smart Chain",
      "coin_shortcut": "BNB",
      "coin_label": "BNB Smart Chain",
      "rpc_url": "ws://localhost:8546",
      "rpc_user": "",
      "rpc_pass": "",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "",
      "subversion": "",
      "address_format": "",
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }
  evm.sh: |
    #!/bin/bash

    get_best_reference_block_number() {
      local best_reference_block_number=0

      for reference_url in "$@"; do
        local eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' $reference_url)

        if [[ $eth_blockNumber != "" ]]; then
          local current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
          local current_block_number=$(($current_block_number_hex))

          if (( $current_block_number > $best_reference_block_number )); then
            best_reference_block_number=$current_block_number
          fi
        fi
      done

      echo $best_reference_block_number
    }

    reference_validation() {
      local service=$1
      local current_block_number=$2
      local best_reference_block_number=$3
      local block_height_tolerance=$4

      if (( $best_reference_block_number > 0 )); then
        local nominal_block_number=$(( $best_reference_block_number - $block_height_tolerance ))

        if (( $current_block_number >= $nominal_block_number )); then
          echo "$service is synced within block height tolerance of reference node"
          exit 0
        fi

        echo "$service is synced, but not within block height tolerance of reference node"
        exit 1
      fi
    }