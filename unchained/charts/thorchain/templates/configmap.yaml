---
apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ .Chart.Name }}-scripts
  namespace: {{ .Chart.Name }}
data: 
  daemon-init.sh: |
    #!/bin/sh

    set -e

    apk add bash

    start_coin() {
      /scripts/fullnode.sh thornode start \
        --p2p.laddr=tcp://0.0.0.0:27146 \
        --proxy_app=tcp://127.0.0.1:27148 \
        --rpc.laddr=tcp://0.0.0.0:27147 &
      PID="$!"
    }

    stop_coin() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    trap 'stop_coin' TERM INT

    start_coin
    wait $PID
  daemon-readiness: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/root/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /tendermint.sh

    BLOCK_HEIGHT_TOLERANCE=5

    SYNCING=$(curl -sf http://localhost:1317/syncing) || exit 1
    NET_INFO=$(curl -sf http://localhost:27147/net_info) || exit 1
    STATUS=$(curl -sf http://localhost:27147/status) || exit 1

    IS_SYNCING=$(echo $SYNCING | jq -r '.syncing')
    CATCHING_UP=$(echo $STATUS | jq -r '.result.sync_info.catching_up')
    NUM_PEERS=$(echo $NET_INFO | jq -r '.result.n_peers')

    if [[ $IS_SYNCING == false && $CATCHING_UP == false ]]; then
      if (( $NUM_PEERS > 0 )); then
        latest_block_height=$(echo $STATUS | jq -r '.result.sync_info.latest_block_height')
        best_reference_block_height=$(get_best_reference_block_height https://rpc.ninerealms.com https://rpc.thorswap.net https://rpc.thorchain.liquify.com)

        # if node is reporting synced, double check against reference nodes
        reference_validation $latest_block_height $best_reference_block_height $BLOCK_HEIGHT_TOLERANCE

        echo "daemon is synced with $NUM_PEERS peers"
        exit 0
      fi

      echo "daemon is synced, but has no peers"
      exit 1
    fi

    echo "daemon is still syncing"
    exit 1
  daemon-liveness: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/root/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/root/.latest_block_height

    STATUS=$(curl -sf http://localhost:27147/status) || exit 1

    LATEST_BLOCK_HEIGHT=$(echo $STATUS | jq -r '.result.sync_info.latest_block_height')

    if [[ ! -f "$FILE" ]]; then
      echo $LATEST_BLOCK_HEIGHT > $FILE
      exit 1
    fi

    PREVIOUS_BLOCK_HEIGHT=$(cat $FILE)
    echo $LATEST_BLOCK_HEIGHT > $FILE

    if (( $LATEST_BLOCK_HEIGHT > $PREVIOUS_BLOCK_HEIGHT )); then
      echo "daemon is running"
      exit 0
    fi

    echo "daemon is stalled"
    exit 1
  daemon-startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/root/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    curl -sf http://localhost:27147/status && exit 0 || exit 1
  timescaledb-init.sh: |
    #!/bin/sh

    set -e

    start_service() {
      docker-entrypoint.sh postgres \
        -c max_connections=100 \
        -c shared_buffers=128MB \
        -c wal_buffers=16MB \
        -c work_mem=8MB \
        -c plan_cache_mode=force_custom_plan &
      PID="$!"
    }

    stop_service() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    trap 'stop_service' TERM INT

    start_service
    wait $PID
  indexer-config.json: |
    {
      "listen_port": 8080,
      "max_block_age": "60s",
      "thorchain": {
        "tendermint_url": "http://localhost:27147/websocket",
        "thornode_url": "http://localhost:1317/thorchain",
        "last_chain_backoff": "7s",
        "fetch_batch_size": 100,
        "parallelism": 4,
        "read_timeout": "32s"
      },
      "timescale": {
        "host": "localhost",
        "port": 5432,
        "user_name": "midgard",
        "password": "password",
        "database": "midgard",
        "sslmode": "disable",
        "commit_batch_size": 100,
        "max_open_conns": 80
      },
      "websockets": {
        "enable": false,
        "connection_limit": 100
      },
      "usdpools": [
        "AVAX.USDC-0XB97EF9EF8734C71904D8002F8B6BC66DD9C48A6E",
        "BNB.BUSD-BD1",
        "ETH.USDC-0XA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48",
        "ETH.USDT-0XDAC17F958D2EE523A2206206994597C13D831EC7"
      ]
    }
  indexer-init.sh: |
    #!/bin/sh

    set -e

    start_service() {
      ./midgard config.json &
      PID="$!"
    }

    stop_service() {
      echo "Catching signal and sending to PID: $PID"
      kill $PID
      while $(kill -0 $PID 2>/dev/null); do
        sleep 1
      done
    }

    trap 'stop_service' TERM INT

    start_service
    wait $PID
  indexer-readiness.sh: |
    #!/bin/bash

    HEALTH=$(curl -sf http://localhost:8080/v2/health) || exit 1

    IN_SYNC=$(echo $HEALTH | jq -r '.inSync')

    if [[ $IN_SYNC == true ]]; then
      echo "midgard is synced"
      exit 0
    fi

    echo "midgard is still syncing"
    exit 1
  tendermint.sh: |
    {{- include "unchained.tendermint" . | nindent 4}}