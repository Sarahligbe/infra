---
apiVersion: v1
kind: ConfigMap
metadata: 
  name: {{ .Values.statefulset.name }}-scripts
  namespace: {{ .Values.statefulset.name }}
data: 
  init.sh: |
    #!/bin/sh

    set -e

    apk add bash curl jq

    DATA_DIR=/data
    CHAINDATA_DIR=$DATA_DIR/geth/chaindata

    if [ -n "$SNAPSHOT" ] && [ ! -d "$CHAINDATA_DIR" ]; then
      wget -c $SNAPSHOT -O - | tar -xvf - -C $DATA_DIR
    fi

    start() {
      geth \
        --networkid 10 \
        --syncmode full \
        --datadir $DATA_DIR \
        --authrpc.jwtsecret /jwt.hex \
        --authrpc.port 8551 \
        --http \
        --http.addr 0.0.0.0 \
        --http.port 8545 \
        --http.api eth,net,web3,debug,txpool,engine \
        --http.vhosts "*" \
        --http.corsdomain "*" \
        --ws \
        --ws.addr 0.0.0.0 \
        --ws.port 8546 \
        --ws.api eth,net,web3,debug,txpool,engine \
        --ws.origins "*" \
        --rollup.disabletxpoolgossip=true \
        --rollup.allowpendingtxfilters \
        --rollup.sequencerhttp https://mainnet-sequencer.optimism.io \
        --txlookuplimit 0 \
        --cache 4096 \
        --maxpeers 0 \
        --nodiscover &
      PID="$!"
    }

    stop() {
      echo "Catching signal and sending to PID: $PID" && kill $PID
      while $(kill -0 $PID 2>/dev/null); do sleep 1; done
    }

    trap 'stop' TERM INT
    start
    wait $PID
  liveness.sh: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/data/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/data/.block_number

    ETH_BLOCK_NUMBER=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    CURRENT_BLOCK_NUMBER_HEX=$(echo $ETH_BLOCK_NUMBER | jq -r '.result')
    CURRENT_BLOCK_NUMBER=$(($CURRENT_BLOCK_NUMBER_HEX))

    if [[ ! -f "$FILE" ]]; then
      echo $CURRENT_BLOCK_NUMBER > $FILE
      exit 1
    fi

    PREVIOUS_BLOCK_NUMBER=$(cat $FILE)
    echo $CURRENT_BLOCK_NUMBER > $FILE

    if (( $CURRENT_BLOCK_NUMBER > $PREVIOUS_BLOCK_NUMBER )); then
      echo "daemon is running"
      exit 0
    fi

    echo "daemon is stalled"
    exit 1
  readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /evm.sh

    BLOCK_HEIGHT_TOLERANCE=25

    ETH_SYNCING=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    SYNCING=$(echo $ETH_SYNCING | jq -r '.result')

    if [[ $SYNCING == false ]]; then
      eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1
      current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
      current_block_number=$(($current_block_number_hex))

      best_reference_block_number=$(get_best_reference_block_number https://mainnet.optimism.io https://optimism.publicnode.com https://opt-mainnet.g.alchemy.com/v2/demo)

      # if node is reporting synced, double check against reference nodes
      reference_validation daemon $current_block_number $best_reference_block_number $BLOCK_HEIGHT_TOLERANCE

      echo "daemon is synced"
      exit 0
    fi

    echo "daemon is still syncing"
    exit 1
  startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/data/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    NET_LISTENING=$(curl -sf -d '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:8545) || exit 1

    LISTENING=$(echo $NET_LISTENING | jq -r '.result')

    if [[ $LISTENING == true ]]; then
      echo "daemon is listening"
      exit 0
    fi

    echo "daemon is not listening"
    exit 1
  jwt.hex: |
    c4b6245538450ae943967a7124fd4deacfc2e947354c3fa5d3f82edf73598899
  indexer-config.json: |
    {
      "fiat_rates": "coingecko",
      "fiat_rates_vs_currencies": "AED,ARS,AUD,BDT,BHD,BMD,BRL,CAD,CHF,CLP,CNY,CZK,DKK,EUR,GBP,HKD,HUF,IDR,ILS,INR,JPY,KRW,KWD,LKR,MMK,MXN,MYR,NGN,NOK,NZD,PHP,PKR,PLN,RUB,SAR,SEK,SGD,THB,TRY,TWD,UAH,USD,VEF,VND,ZAR,BTC,ETH",
      "fiat_rates_params": "{\"url\": \"https://api.coingecko.com/api/v3\", \"coin\": \"ethereum\",\"platformIdentifier\": \"ethereum\",\"platformVsCurrency \": \"eth\",\"periodSeconds\": 900}",
      "mempoolTxTimeoutHours": 24,
      "queryBackendOnMempoolResync": false,
      "coin_name": "Optimism",
      "coin_shortcut": "ETH",
      "coin_label": "Optimism",
      "rpc_url": "ws://localhost:8546",
      "rpc_user": "",
      "rpc_pass": "",
      "rpc_timeout": 25,
      "parse": true,
      "message_queue_binding": "",
      "subversion": "",
      "address_format": "",
      "mempool_workers": 8,
      "mempool_sub_workers": 2,
      "block_addresses_to_keep": 300
    }
  op-node-init.sh: |
    #!/bin/sh

    set -e

    apk add bash curl jq

    start() {
      op-node \
        --network $NETWORK \
        --rpc.addr 0.0.0.0 \
        --rpc.port 9545 \
        --l1 $L1_RPC_ENDPOINT \
        --l1.trustrpc \
        --l1.rpckind debug_geth \
        --l2 http://localhost:8551 \
        --l2.jwt-secret /jwt.hex &
      PID="$!"
    }

    stop() {
      echo "Catching signal and sending to PID: $PID" && kill $PID
      while $(kill -0 $PID 2>/dev/null); do sleep 1; done
    }

    trap 'stop' TERM INT
    start
    wait $PID
  op-node-liveness.sh: |
    #!/bin/bash

    DISABLE_LIVENESS_PROBE=/data/disable_liveness

    if [[ -f "$DISABLE_LIVENESS_PROBE" ]]; then
      echo "liveness probe disabled"
      exit 0
    fi

    FILE=/data/.block_number

    SYNC_STATUS=$(curl -sf -d '{"jsonrpc":"2.0","method":"optimism_syncStatus","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9545) || exit 1

    CURRENT_L1_BLOCK_NUMBER=$(echo $SYNC_STATUS | jq -r .result.current_l1.number)
    CURRENT_L2_BLOCK_NUMBER=$(echo $SYNC_STATUS | jq -r .result.unsafe_l2.number)

    JSON="{\"l1\": $CURRENT_L1_BLOCK_NUMBER, \"l2\": $CURRENT_L2_BLOCK_NUMBER}"

    if [[ ! -f "$FILE" ]]; then
      echo $JSON > $FILE
      exit 1
    fi

    PREVIOUS_L1_BLOCK_NUMBER=$(cat $FILE | jq -r '.l1')
    PREVIOUS_L2_BLOCK_NUMBER=$(cat $FILE | jq -r '.l2')

    echo $JSON > $FILE

    if (( $CURRENT_L1_BLOCK_NUMBER > $PREVIOUS_L1_BLOCK_NUMBER && $CURRENT_L2_BLOCK_NUMBER > $PREVIOUS_L2_BLOCK_NUMBER )); then
      echo "op-node is running"
      exit 0
    fi

    echo "op-node is stalled"
    exit 1
  op-node-readiness.sh: |
    #!/bin/bash

    DISABLE_READINESS_PROBE=/data/disable_readiness

    if [[ -f "$DISABLE_READINESS_PROBE" ]]; then
      echo "readiness probe disabled"
      exit 0
    fi

    source /evm.sh

    BLOCK_HEIGHT_TOLERANCE=5

    SYNC_STATUS=$(curl -s -d '{"jsonrpc":"2.0","method":"optimism_syncStatus","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9545)

    QUEUED_UNSAFE_L2_HEIGHT=$(echo $SYNC_STATUS | jq -r .result.queued_unsafe_l2.number)

    if (( $QUEUED_UNSAFE_L2_HEIGHT == 0 )); then
      current_l1_block_number=$(echo $SYNC_STATUS | jq -r .result.current_l1.number)
      best_reference_block_number=$(get_best_reference_block_number $L1_RPC_ENDPOINT https://ethereum.publicnode.com https://eth-mainnet.g.alchemy.com/v2/demo)

      reference_validation op-node $current_l1_block_number $best_reference_block_number $BLOCK_HEIGHT_TOLERANCE

      echo "op-node is synced"
      exit 0
    fi

    echo "op-node is still syncing"
    exit 1
  op-node-startup.sh: |
    #!/bin/bash

    DISABLE_STARTUP_PROBE=/data/disable_startup

    if [[ -f "$DISABLE_STARTUP_PROBE" ]]; then
      echo "startup probe disabled"
      exit 0
    fi

    VERSION=$(curl -sf -d '{"jsonrpc":"2.0","method":"optimism_version","params":[],"id":1}' -H 'Content-Type: application/json' http://localhost:9545) || exit 1

    RESULT=$(echo $VERSION | jq -r '.result')

    if [[ result != "" ]]; then
      echo "op-node started"
      exit 0
    fi

    echo "op-node not started"
    exit 1
  evm.sh: |
    #!/bin/bash

    get_best_reference_block_number() {
      local best_reference_block_number=0

      for reference_url in "$@"; do
        local eth_blockNumber=$(curl -sf -d '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' -H 'Content-Type: application/json' $reference_url)

        if [[ $eth_blockNumber != "" ]]; then
          local current_block_number_hex=$(echo $eth_blockNumber | jq -r '.result')
          local current_block_number=$(($current_block_number_hex))

          if (( $current_block_number > $best_reference_block_number )); then
            best_reference_block_number=$current_block_number
          fi
        fi
      done

      echo $best_reference_block_number
    }

    reference_validation() {
      local service=$1
      local current_block_number=$2
      local best_reference_block_number=$3
      local block_height_tolerance=$4

      if (( $best_reference_block_number > 0 )); then
        local nominal_block_number=$(( $best_reference_block_number - $block_height_tolerance ))

        if (( $current_block_number >= $nominal_block_number )); then
          echo "$service is synced within block height tolerance of reference node"
          exit 0
        fi

        echo "$service is synced, but not within block height tolerance of reference node"
        exit 1
      fi
    }